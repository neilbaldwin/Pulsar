# 128K SXROM

MEMORY
{
	ZP:     start =   $10, size =  $F0;
	STACK:  start =  $100, size =  $100;
	RAM:    start =  $200, size =  $500;
	
	HEADER: start =     0, size =   $10, fill=yes;

	SRAM:	start = $6000, size = $2000;
	
	ROM_00:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_01:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_02:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_03:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_04:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_05:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_06:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_07:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_08:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_09:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_0A:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_0B:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_0C:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_0D:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_0E:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_0F:    start = $C000, size = $3FD2, fill=yes, fillval=$FF;
	VECTORS2: start $FFD2, size=$2E, fill=yes, fillval=$FF;
	
	ROM_10:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_11:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_12:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_13:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_14:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_15:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_16:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_17:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_18:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_19:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_1A:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_1B:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_1C:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_1D:    start = $8000, size = $4000, fill=yes, fillval=$FF;
	ROM_1E:    start = $8000, size = $4000, fill=yes, fillval=$FF;

	ROM_FIXED:	start = $C000, size = $07FF, fill=yes, fillval=$FF;
	ROM_DPCM:	start = $C800, size = $37D2, fill=yes, fillval=$00;
	
	VECTORS:	start = $FFD2, size =    $2E, fill=yes;
}

# align allow .align N up to that amount

SEGMENTS
{
	ZEROPAGE:   load = ZP,      type = zp;
	STACK:      load = STACK,   type = bss,align=$100, optional=yes;
	BSS:        load = RAM,     type = bss,align=$200;
	RAM:		load = RAM	type = bss,align=$100;
	
	SRAM:		load = SRAM	type = bss,align=$100;
	
	HEADER:     load = HEADER,  type = ro;
	
	CODE_00:       load = ROM_00,     type = ro, align=$200;
	CODE_01:       load = ROM_01,     type = ro, align=$200;
	CODE_02:       load = ROM_02,     type = ro, align=$200;
	CODE_03:       load = ROM_13,     type = ro, align=$200;
	CODE_04:       load = ROM_04,     type = ro, align=$200;
	CODE_05:       load = ROM_05,     type = ro, align=$200;
	CODE_06:       load = ROM_06,     type = ro, align=$200;
	CODE_07:       load = ROM_07,     type = ro, align=$200;
	CODE_08:       load = ROM_08,     type = ro, align=$200;
	CODE_09:       load = ROM_09,     type = ro, align=$200;
	CODE_0A:       load = ROM_0A,     type = ro, align=$200;
	CODE_0B:       load = ROM_0B,     type = ro, align=$200;
	CODE_0C:       load = ROM_0C,     type = ro, align=$200;
	CODE_0D:       load = ROM_0D,     type = ro, align=$200;
	CODE_0E:       load = ROM_0E,     type = ro, align=$200;
	CODE_0F:       load = ROM_0F,     type = ro, align=$200;

	VECTORS2:    load = VECTORS2, type = ro;

	CODE_10:       load = ROM_10,     type = ro, align=$200;
	CODE_11:       load = ROM_11,     type = ro, align=$200;
	CODE_12:       load = ROM_12,     type = ro, align=$200;
	CODE_13:       load = ROM_13,     type = ro, align=$200;
	CODE_14:       load = ROM_14,     type = ro, align=$200;
	CODE_15:       load = ROM_15,     type = ro, align=$200;
	CODE_16:       load = ROM_16,     type = ro, align=$200;
	CODE_17:       load = ROM_17,     type = ro, align=$200;
	CODE_18:       load = ROM_18,     type = ro, align=$200;
	CODE_19:       load = ROM_19,     type = ro, align=$200;
	CODE_1A:       load = ROM_1A,     type = ro, align=$200;
	CODE_1B:       load = ROM_1B,     type = ro, align=$200;
	CODE_1C:       load = ROM_1C,     type = ro, align=$200;
	CODE_1D:       load = ROM_1D,     type = ro, align=$200;
	CODE_1E:       load = ROM_1E,     type = ro, align=$200;
	
	CODE_FIXED:       load = ROM_FIXED,     type = ro, align=$200;
	DPCM:		load = ROM_DPCM,	type = ro, align=$40;
	
	VECTORS:    load = VECTORS, type = ro;
}
