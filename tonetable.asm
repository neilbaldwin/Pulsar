

;
;IN : A = note number
;OUT : A = lo byte of frequency, Y = hi byte of frequency
;    : X is not used
;
;Optionally set 'noteAddNote' to semitone offset (from original pitch) and/or
; 'noteAddFrac' for fraction of semitone offset (from original pitch)
;
getNote:
	clc
	adc noteAddNote		;pitch offset in semitones
	tay
	lda octaveShiftTable,y	;get number of times to divide value by 2
	pha			;save on stack
	lda note2Table,y		;get index into pitch table (note * 16)
	clc
	adc noteAddFrac		;fractional pitch offset
	tay
	lda Tone2PeriodLo,y		;grab 16-bit freq values from table
	sta engineTmp0		;store in temp vars for division
	lda Tone2PeriodHi,y
	sta engineTmp1
	pla			;get shift count from stack
	beq @a			;skip shifting if in bottom octave
	tay			;shift count in Y
@b:	lsr engineTmp1		;16-bit divide by 2
	ror engineTmp0
	dey			;do until shift count = 0
	bne @b
@a:	lda engineTmp0		;get lo byte in a
	ldy engineTmp1		;get hi byte in Y
	rts

;
;One octave (lowest) of 12 semi-tones, sub-divided into 16 steps
;Used 16 steps instead of 32 so tables can be indexed with 8bit index
;

	.IF PAL_VERSION = 0
Tone2PeriodLo:
  .byte $f1,$ea,$e2,$db,$d4,$cc,$c5,$be,$b7,$b0,$a9,$a2,$9b,$94,$8d,$86	;A
  .byte $7f,$78,$71,$6a,$63,$5c,$56,$4f,$48,$41,$3b,$34,$2d,$27,$20,$19	;A#
  .byte $13,$0c,$06,$ff,$f9,$f3,$ec,$e6,$df,$d9,$d3,$cc,$c6,$c0,$ba,$b3	;B
  .byte $ad,$a7,$a1,$9b,$95,$8f,$89,$83,$7d,$77,$71,$6b,$65,$5f,$59,$53	;C
  .byte $4d,$47,$42,$3c,$36,$30,$2b,$25,$1f,$1a,$14,$0e,$09,$03,$fe,$f8	;C#
  .byte $f3,$ed,$e8,$e2,$dd,$d7,$d2,$cd,$c7,$c2,$bd,$b7,$b2,$ad,$a8,$a2	;D
  .byte $9d,$98,$93,$8e,$89,$83,$7e,$79,$74,$6f,$6a,$65,$60,$5b,$56,$51	;D#
  .byte $4c,$48,$43,$3e,$39,$34,$2f,$2b,$26,$21,$1c,$18,$13,$0e,$0a,$05	;E
  .byte $00,$fc,$f7,$f2,$ee,$e9,$e5,$e0,$dc,$d7,$d3,$ce,$ca,$c5,$c1,$bd	;F
  .byte $b8,$b4,$b0,$ab,$a7,$a3,$9e,$9a,$96,$92,$8d,$89,$85,$81,$7d,$79	;F#
  .byte $74,$70,$6c,$68,$64,$60,$5c,$58,$54,$50,$4c,$48,$44,$40,$3c,$38	;G
  .byte $34,$31,$2d,$29,$25,$21,$1d,$19,$16,$12,$0e,$0a,$07,$03,$ff,$fc	;G#

Tone2PeriodHi:
  .byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07	;A
  .byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07	;A#
  .byte $07,$07,$07,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06	;B
  .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06	;C
  .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05,$05	;C#
  .byte $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05	;D
  .byte $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05	;D#
  .byte $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05	;E
  .byte $05,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04	;F
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04	;F#
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04	;G
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$03,$03	;G#
	.ELSE
Tone2PeriodLoTab:
  .byte $60,$5a,$53,$4c,$45,$3f,$38,$31,$2b,$24,$1d,$17,$10,$0a,$03,$fd
  .byte $f6,$f0,$e9,$e3,$dd,$d6,$d0,$ca,$c4,$bd,$b7,$b1,$ab,$a5,$9e,$98
  .byte $92,$8c,$86,$80,$7a,$74,$6e,$68,$62,$5c,$57,$51,$4b,$45,$3f,$39
  .byte $34,$2e,$28,$23,$1d,$17,$12,$0c,$06,$01,$fb,$f6,$f0,$eb,$e5,$e0
  .byte $db,$d5,$d0,$ca,$c5,$c0,$ba,$b5,$b0,$ab,$a5,$a0,$9b,$96,$91,$8c
  .byte $86,$81,$7c,$77,$72,$6d,$68,$63,$5e,$59,$54,$4f,$4a,$46,$41,$3c
  .byte $37,$32,$2d,$29,$24,$1f,$1a,$16,$11,$0c,$08,$03,$fe,$fa,$f5,$f1
  .byte $ec,$e7,$e3,$de,$da,$d5,$d1,$cd,$c8,$c4,$bf,$bb,$b7,$b2,$ae,$aa
  .byte $a5,$a1,$9d,$98,$94,$90,$8c,$88,$83,$7f,$7b,$77,$73,$6f,$6b,$66
  .byte $62,$5e,$5a,$56,$52,$4e,$4a,$46,$42,$3e,$3b,$37,$33,$2f,$2b,$27
  .byte $23,$20,$1c,$18,$14,$10,$0d,$09,$05,$01,$fe,$fa,$f6,$f3,$ef,$eb
  .byte $e8,$e4,$e1,$dd,$d9,$d6,$d2,$cf,$cb,$c8,$c4,$c1,$bd,$ba,$b7,$b3
Tone2PeriodHiTab:
  .byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$06
  .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
  .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
  .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$05
  .byte $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
  .byte $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
  .byte $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$04,$04,$04,$04
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
  .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$03,$03,$03,$03,$03,$03
  .byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
	.ENDIF
note2Table:
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0
  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0


octaveShiftTable:
  .byte 00,00,00,00,00,00,00,00,00,00,00,00		;1
  .byte 01,01,01,01,01,01,01,01,01,01,01,01		;2
  .byte 02,02,02,02,02,02,02,02,02,02,02,02		;3
  .byte 03,03,03,03,03,03,03,03,03,03,03,03		;4
  .byte 04,04,04,04,04,04,04,04,04,04,04,04		;5
  .byte 05,05,05,05,05,05,05,05,05,05,05,05		;6
  .byte 06,06,06,06,06,06,06,06,06,06,06,06		;7
  .byte 07,07,07,07,07,07,07,07,07,07,07,07		;8
  .byte 08,08,08,08,08,08,08,08,08,08,08,08		;9

